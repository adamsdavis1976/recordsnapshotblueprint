blueprint:
  name: Camera snapshot and actions when binary sensor is triggered
  description: >-
    Creates a snapshot and triggers a subsequent action when a binary sensor is triggered
  domain: automation
  input:
    binary_sensor:
      name: Binary sensor
      description: The sensor wich triggers the snapshot creation
      selector:
        entity:
          domain: binary_sensor
    camera:
      name: Camera
      description: The camera which creates the snapshot
      selector:
        entity:
          domain: camera
    alarm_panel_entity:
      name: '(OPTIONAL) Alarm panel entity'
      description: If this entity state is 'armed_away', it will prevent the automation from running. E.g. somebody is home (binary_sensor.people_home).
      default:
      selector:
        entity:
          domain: alarm_control_panel
    delay:
      name: 'Snapshot Delay (Optional)'
      description: 'Wait before creating camera snapshot'
      default: 0.0
      selector:
        number:
          min: 0.0
          max: 60.0
          unit_of_measurement: seconds
          mode: slider
          step: 1.0
    duration:
      name: 'Video Record Duration (Optional)'
      description: 'Wait before creating camera snapshot'
      default: 5
      selector:
        number:
          min: 2
          max: 60
          unit_of_measurement: seconds
          mode: slider
          step: 1.0

    notify_device:
      name: Device to notify
      description: Device needs to run the official Home Assistant app to receive notifications
      selector:
        device:
          integration: mobile_app
   
    notification_title:
      name: Notification title (Optional)
      description: 'Default: "Motion detected!"'
      default: "Motion detected!"
      
    notification_message:
      name: Notification message (Optional)
      description: 'Default: "{{ binary_sensor_name }} detected movement!"'
      default: "{{ binary_sensor_name }} detected movement!"

    additional_actions:
      name: 'Additional Actions'
      description: >-
        Actions after taking snapshot. (Optional)
        Example: A notification using {{ snapshot_file_path }} as the image.
      default: []
      selector:
        action:
#source_url: https://github.com/adamsdavis1976/recordsnapshotblueprint/blob/master/recordsnapshot.yaml
mode: restart
variables:
  binary_sensor: !input 'binary_sensor'
  binary_sensor_name: '{{ states[binary_sensor].name }}'
  camera: !input 'camera'
  delay: !input 'delay'
  duration: !input 'duration'
  
  archive_location: '/config/www/archive'
  latest_location: '/config/www/latest'
  
  snapshot_create_file_path: '{{ archive_location }}/snapshot_{{ states[camera].object_id }}_{{ now().strftime("%Y%m%d-%H%M%S") }}.jpg'
  snapshot_file_path: '{{ snapshot_create_file_path | replace(''/config/www'', ''/local'') }}'
  snapshot_latest_create_file_path: '{{ latest_location }}/snapshot_{{ states[camera].object_id }}_latest.jpg'

  recording_create_file_path: '{{ archive_location }}/recording_{{ states[camera].object_id }}_{{ now().strftime("%Y%m%d-%H%M%S") }}.mp4'
  recording_file_path: '{{ recording_create_file_path | replace(''/config/www'', ''/local'') }}'
  recording_latest_create_file_path: '{{ latest_location }}/recording_{{ states[camera].object_id }}_latest.mp4'
  
  notify_device: !input notify_device
  notification_title: !input notification_title
  notification_message: !input notification_message

  alarm_panel_entity: !input alarm_panel_entity
 
trigger:
  platform: state
  entity_id: !input 'binary_sensor'
  from: 'off'
  to: 'on'
  
condition:
  - condition: template
    value_template: >
      {{ (alarm_panel_entity == none) or (states[alarm_panel_entity].state == 'armed_away') }}
      
action: 

  - entity_id: !input 'binary_sensor'
    service:  >
      {% if (alarm_panel_entity != none) %}
        alarm_control_panel.alarm_trigger
      {% endif %}

  - service: camera.record
    entity_id: !input 'camera'
    data:
      duration: '{{ duration }}'
      filename: '{{ recording_create_file_path }}'
  - delay: '{{ delay }}'
  - service: camera.snapshot
    entity_id: !input 'camera'
    data:
      filename: '{{ snapshot_create_file_path }}'
  - delay: '{{ duration + 2 }}'
  - service: shell_command.copy 
    data:
      from: '{{ snapshot_create_file_path }}'
      to: '{{ snapshot_latest_create_file_path }}'
  - service: shell_command.copy
    data:
      from: '{{ recording_create_file_path }}'
      to: '{{ recording_latest_create_file_path }}'
  - device_id: !input notify_device
    domain: mobile_app
    type: notify
    title: "{{ notification_title }}"
    message: "{{ notification_message }}"
    data:
      image: "{{ snapshot_file_path }}"
      clickAction: "{{ recording_file_path }}"
